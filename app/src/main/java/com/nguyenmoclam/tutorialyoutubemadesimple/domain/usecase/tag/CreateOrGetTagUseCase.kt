package com.nguyenmoclam.tutorialyoutubemadesimple.domain.usecase.tag

import com.nguyenmoclam.tutorialyoutubemadesimple.data.repository.QuizRepository
import com.nguyenmoclam.tutorialyoutubemadesimple.domain.model.tag.Tag
import javax.inject.Inject

/**
 * Use case to create a new tag if it doesn't exist, or return the existing tag.
 */
class CreateOrGetTagUseCase @Inject constructor(
    private val quizRepository: QuizRepository
) {
    /**
     * @param tagName The name of the tag to create or get.
     * @return The created or existing Tag object, or null if insertion/retrieval failed.
     */
    suspend operator fun invoke(tagName: String): Tag? {
        val trimmedName = tagName.trim()
        if (trimmedName.isEmpty()) {
            return null // Cannot create empty tag
        }

        // Check if tag already exists (case-insensitive check might be good here)
        val existingTag = quizRepository.getTagByName(trimmedName)
        if (existingTag != null) {
            return existingTag
        }

        // Tag doesn't exist, create it
        val newTag = Tag(name = trimmedName) // ID will be auto-generated by Room
        val insertedId = quizRepository.insertTag(newTag)

        return if (insertedId != -1L) {
            // Return the newly created tag with its generated ID
            quizRepository.getTagByName(trimmedName) // Re-fetch to get the tag with ID
        } else {
            // Insertion failed (maybe a race condition or other DB error)
            null
        }
    }
}
